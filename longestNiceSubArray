class Solution {

    public int longestNiceSubarray(int[] nums) {
        int maxLen = 1; // Track the maximum nice subarray length found

        for (int i = 0;i< nums.length - maxLen; i++) 
        {
            int currentLength = 1; // Length of current nice subarray
            int usedBits = nums[i]; // Track which bits are used in our subarray

            // Try to extend the subarray
            for (int j =i+ 1; j< nums.length; j++) {
                // If no bits overlap between current number and used bits, we can extend
                if ((usedBits & nums[j])==0) 
                {
                    usedBits |= nums[j]; // Add new number's bits to our tracker
                    currentLength++;
                }
                // If bits overlap, this number can't be part of our nice subarray
                else 
                break;
            }

            // Update max length if we found a longer nice subarray
            maxLen = Math.max(maxLen, currentLength);
        }

        return maxLen;
    }
}
