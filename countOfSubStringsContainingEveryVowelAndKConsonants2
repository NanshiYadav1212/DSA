class Solution {
    private boolean check(Map<Character, Integer> m) {
        String vowels = "aeiou";
        for (char c : vowels.toCharArray()) {
            if (m.getOrDefault(c, 0) < 1) return false;
        }
        return true;
    }

    private long atleastK(String word, int k) {
        long ans = 0;
        Map<Character, Integer> m = new HashMap<>();
        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));
        int n = word.length();
        int consonantCount = 0;
        int left = 0;

        for (int right = 0; right < n; right++) {
            char c = word.charAt(right);
            if (!vowels.contains(c)) {
                consonantCount++;
            } else {
                m.put(c, m.getOrDefault(c, 0) + 1);
            }

            while (consonantCount >= k && m.size() == 5) {
                ans += n - right;
                char leftChar = word.charAt(left);
                if (!vowels.contains(leftChar)) {
                    consonantCount--;
                } else {
                    m.put(leftChar, m.get(leftChar) - 1);
                    if (m.get(leftChar) == 0) {
                        m.remove(leftChar);
                    }
                }
                left++;
            }
        }
        return ans;
    }

    public long countOfSubstrings(String word, int k) {
        return atleastK(word, k) - atleastK(word, k + 1);
    }
}

